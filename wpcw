#!/usr/bin/perl
$|=1;

use v5.12;
use utf8;
use autodie;
use Carp;
use lib 'lib';
use FindBin qw/$Bin/;
binmode(STDOUT, ":utf8");

my $PASSWORD = 'desu';
my $DEBUG    = 0;
#-----------------------------------------------------------------------------
use MIME::Base64; 
use Getopt::Long qw/:config bundling/;
use File::Spec;
use File::Basename;
use File::Temp qw/tempfile/;
#-----------------------------------------------------------------------------
use PCW::Core::Utils qw/get_proxylist readfile/;
use PCW::Core::Log;
use Storable;
#-----------------------------------------------------------------------------
# Global variables
#-----------------------------------------------------------------------------
our %mode_config;
our $chan_config;
our $log_settings;

my @proxies;
my @agents;
my $engine;
my $logging;

our $error;
#-----------------------------------------------------------------------------
# Config
#-----------------------------------------------------------------------------
my $lastcnf = '.lastcnf';
my %cnf = (
    chan       => 'Mochan',
    mode       => 'Wipe',
    verbose    => 0,
    useragents => 'UserAgents',
    proxy_file => File::Spec->catfile('proxy', 'no'),
    proxy_type => 'http',

    common_config => 'config.pl',
    mode_config   => File::Spec->catfile('configs', 'Wipe.pl'),

    loglevel   => 1,
    lognocolor => 0,
);

#-----------------------------------------------------------------------------
# Config
#-----------------------------------------------------------------------------
sub check_image_config()
{
    my $img_mode = $mode_config{img_data}{mode} . '_img';
    my $result   = 0;
    return 0 if $img_mode =~ /no_img/;
    unless ($mode_config{img_data}{path})
    {
        if ($mode_config{img_data}{captcha} || $mode_config{img_data}{rand})
        {
            $logging->msg('ERROR', "Image path not defined!", "ERROR", 'red');
            $result = 1;
        }
    }
    if (ref($mode_config{img_data}{path}) eq 'ARRAY')
    {
        for (@{ $mode_config{img_data}{path} })
        {
            unless (-e $_)
            {
                $logging->msg('ERROR', "'$_' doesn't exist!", "ERROR", 'red');
                $result = 1;
            }
            if (-z $_)
            {
                $logging->msg('ERROR', "'$_' is empty!", "ERROR", 'red');
                $result = 1;
            }
        }
    }
    else
    {
        unless (-e $mode_config{img_data}{path})
        {
            $logging->msg('ERROR', $mode_config{img_data}{path} . " doesn't exist!", "ERROR", 'red');
            $result = 1;
        }
        if (-z $_)
        {
            $logging->msg('ERROR', "'$_' is empty!", "ERROR", 'red');
            $result = 1;
        }
    }

    eval {
        use PCW::Data::Images qw/make_pic/;
        make_pic($engine, {test => 1}, $mode_config{img_data});
    };
    if ($@)
    {
        say "img_mode: $img_mode" if $DEBUG;
        $logging->msg('ERROR', sprintf("Image mode '%s' doesn't exist!", $img_mode), 'ERROR', 'red');
        $result = 1;
    }

    if ($mode_config{img_data}{max_size})
    {
        if (int((-s $mode_config{img_data}{path})/1024) > $mode_config{img_data}{max_size})
        {
            $logging->msg('ERROR', "The file size greaten then max size allowed!", 'ERROR', 'red');
            $result = 1;
        }
    }
    if ($mode_config{img_data}{mode} eq 'dir' and !$mode_config{img_data}{types} || !(@{ $mode_config{img_data}{types} }))
    {
        $logging->msg('ERROR', "Allowed file types not specified!", "ERROR", 'red');
        $result = 1;
    }
    if ($mode_config{img_data}{altering}{mode} !~ /randnums|randbytes|convert/ )
    {
        $logging->msg('ERROR', sprintf("Image altering method '%s' doesn't exist", $mode_config{img_data}{altering}{mode}), 'ERROR', 'red');
        $result = 1;
    }
    return $result;
}

sub check_video_config()
{
    my $vid_mode = $mode_config{vid_data}{mode} . '_vid';
    return 0 if $vid_mode =~ /no_vid/;
    eval {
        use PCW::Data::Video qw/make_vid/;
        make_vid($engine, {test => 1}, $mode_config{vid_data});
    };
    if ($@)
    {
        $logging->msg('ERROR', sprintf("Video mode '%s' doesn't exist!", $mode_config{vid_mode}{mode}), 'ERROR', 'red');
        return 1;
    }
    return 0;
}

sub check_captcha_config()
{
    my $captcha_mode      = $mode_config{captcha_decode}{mode};
    my $captcha_mode_path = File::Spec->catfile($Bin, 'OCR', "$captcha_mode.pm");
    unless (-e $captcha_mode_path)
    {
        $logging->msg('ERROR', "Captcha decode method '$captcha_mode' does not exist at $captcha_mode_path", "ERROR", 'red');
        return 1;
    }
    return 0;
}

sub check_configs()
{
    $error = check_image_config() || check_video_config() || check_captcha_config();
}
#-----------------------------------------------------------------------------
# Load
#-----------------------------------------------------------------------------
sub load_cnf()
{
    if (-e $lastcnf)
    {
        %cnf = %{ retrieve($lastcnf) };
    }
    my ($fh, $log_file_path) = tempfile('pcw-log-XXXXXX', UNLINK => 1, TMPDIR => 1, SUFFIX => ".log");
    $cnf{logfile} = $log_file_path;
}

sub load_configs()
{
    our ($img, $msg, $vid, $captcha_decode);
    do $cnf{common_config} or die; #-- load $img, $msg, $vid, $captcha_decode, $log_settings
    do $cnf{mode_config}   or die; #-- load %mode_config

    $mode_config{img_data} = $img;
    $mode_config{msg_data} = $msg;
    $mode_config{vid_data} = $vid;
    $mode_config{captcha_decode} = $captcha_decode;
}

sub set_configs($)
{
    my $pcw = shift;
    load_configs();
    check_configs();
    $pcw->{conf} = \%mode_config;
}
#-----------------------------------------------------------------------------
sub load_proxies()
{
    @proxies = get_proxylist($cnf{proxy_file}, $cnf{proxy_type});
}

#-----------------------------------------------------------------------------
sub load_agents()
{
    open my $fh, '<', $cnf{useragents};
    @agents = <$fh>;
    close $fh;
}

sub set_agents($)
{
    my $pcw = shift;
    load_agents();
    $pcw->{engine}{agents} = \@agents;
}
#-----------------------------------------------------------------------------
sub load_chan()
{
    my $package = File::Spec->catfile('chans', "$cnf{chan}.pl");
    say $chan_config->{urls}{post} if $DEBUG;
    do "$package"; #-- load $chan_config
    say $chan_config->{urls}{post} if $DEBUG;
}

# sub set_chan($)
# {
#     my $pcw = shift;
#     load_chan();
#     for (keys %$chan_config)
#     {
#         $pcw->{engine}{$_} = $chan_config->{$_};
#     }
# }
#-----------------------------------------------------------------------------
sub load_logging()
{
    $logging = PCW::Core::Log->new(file     => $cnf{logfile},
                                   level    => $cnf{loglevel},
                                   colored  => !$cnf{lognocolor},
                                   settings => $log_settings );
}

sub set_logging($)
{
    my $pcw = shift;
    load_logging();
    $pcw->{log}         = $logging;
    $pcw->{engine}{log} = $logging;
    $pcw->{verbose}         = $cnf{verbose};
    $pcw->{engine}{verbose} = $cnf{verbose};
}
#-----------------------------------------------------------------------------
sub load_engine()
{
    my $package = "PCW::Engine::". $chan_config->{engine};
    eval("use $package");
    say "$package" if $DEBUG;
    Carp::croak($@) if ($@);
    $engine = $package->new(%$chan_config, agents => \@agents, log => $logging, verbose => $cnf{verbose});
}

sub set_engine($)
{
    my $pcw = shift;
    $pcw->{engine} = load_engine();
}
#-----------------------------------------------------------------------------
sub load_mode()
{
    my $package = "PCW::Modes::$cnf{mode}";
    say "$package" if $DEBUG;
    eval("use $package");
    Carp::croak($@) if ($@);
    return $package->new(engine   => $engine,
                         proxies  => \@proxies,
                         conf     => \%mode_config,
                         log      => $logging,
                         verbose  => $cnf{verbose});

}
#-----------------------------------------------------------------------------
# RUN
#-----------------------------------------------------------------------------
load_cnf(); #-- read %cnf from disk if it exist
sub load_all()
{
    load_configs();      #-- load %mode_config
    load_proxies();
    load_agents();
    load_chan();         #-- load $chan_config
    load_logging();
    load_engine();
    check_configs();
    say 'loaded' if $DEBUG;
    return load_mode();
}

my $pcw = load_all();

#-----------------------------------------------------------------------------
# Web UI
#-----------------------------------------------------------------------------
use Mojolicious::Lite;
use Mojo::Base 'Mojo::Cookie';
use HTML::FromANSI ();

#-----------------------------------------------------------------------------
# control
#-----------------------------------------------------------------------------
get '/login' => sub {
    my $self = shift;
    my $pass = $self->param('pass') || '';
    return $self->render if $pass ne $PASSWORD;
    $self->session(pass => $pass);
    $self->redirect_to('/');
} => 'login';

under sub {
    my $self = shift;
    $self->redirect_to('login') if !$self->session('pass') and $PASSWORD;
    return 1;
};

get '/' =>  'index';

get '/logout' => sub {
    my $self = shift;
    $self->session(expires => 1);
    $self->redirect_to('/');
} => 'logout';

get '/start'  => sub {
    my $self = shift;
    say $error if $DEBUG;
    if ($error)
    {
        $logging->msg('ERROR', "Can't start! Check your configs!", "ERROR", "red");
    }
    else
    {
        $pcw->{engine}{ocr}{web}{request} = [];
        $pcw->{engine}{ocr}{web}{answers} = {};
        $pcw->init;
        $pcw->start;
    }
    $self->render(text => 'ok');
};

get '/stop'  => sub {
    my $self = shift;
    $pcw->stop;
    # очищаем капчи
    $pcw->{engine}{ocr}{web} = {};
    $self->render(text => 'ok');
};

get '/wipe/send_posts' => sub {
    my $self = shift;
    $pcw->send_posts();
    $self->render(text => 'ok');
};

#-----------------------------------------------------------------------------
# reload
#-----------------------------------------------------------------------------
get '/reload/all' => sub {
    my $self = shift;
    if ($pcw->{is_running})
    {
        $pcw->stop();
        sleep 1 while ($pcw->{is_running});
    }
    $pcw = load_all();
    store \%cnf, $lastcnf;
    $self->render(text => '');
};

get '/reload/configs' => sub {
    my $self = shift;
    set_configs($pcw);
    $pcw->{engine}{static_mm} = undef;
    store \%cnf, $lastcnf;
    $self->render(text => '');
};

get '/reload/watchers' => sub {
    my $self = shift;
    $pcw->re_init_all_watchers();
    $self->render(text => '');
};

get '/reload/agents' => sub {
    my $self = shift;
    set_agents($pcw);
    store \%cnf, $lastcnf;
    $self->render(text => '');
};

# get '/reload/chan' => sub {
#     my $self = shift;
#     set_chan($pcw);
#     store \%cnf, $lastcnf;
#     $self->render(text => '');
# };

get '/reload/log' => sub {
    my $self = shift;
    set_logging($pcw);
    store \%cnf, $lastcnf;
    $self->render(text => '');
};

# get '/reload/engine' => sub {
#     my $self = shift;
#     set_engine($pcw);
#     store \%cnf, $lastcnf;
#     $self->render(text => '');
# };
#-----------------------------------------------------------------------------
# info
#-----------------------------------------------------------------------------
get '/stats' => [ format => ['json'] ] => sub {
    my $self = shift;
    $self->render_json($pcw->{stats} || {});
};

get '/status' => [ format => ['json']] => sub {
    my $self = shift;
    $self->render_json($pcw->{is_running} ? 'stop' : 'start');
};

get '/countproxies' => sub {
    my $self = shift;
    $self->render_json(scalar(@proxies));
};

#-----------------------------------------------------------------------------
# logging
#-----------------------------------------------------------------------------
# event source
get '/log/read' => sub {
  my $self = shift;
  $self->render_later;

  # Increase inactivity timeout for connection a bit
  Mojo::IOLoop->stream( $self->tx->connection )->timeout(500);

  # Change content type

  $self->res->headers->content_type('text/event-stream');
  $self->res->headers->header( 'X-Accel-Buffering' => 'no' );

  my $pid = open( my $fh, "-|", "tail -F -n 0 $cnf{logfile}" );
  defined($pid) || die "can't fork: $!";

  # Create stream
  my $stream = Mojo::IOLoop::Stream->new($fh);
  $stream->timeout(0);
  $stream->on(
    read => sub {
      my ( $stream, $chunk ) = @_;
      my $h  = HTML::FromANSI->new(style => 'line-height: 1; letter-spacing: 0; font-size: 9pt');
      $h->add_text($chunk);
      $chunk = $h->html;
      $self->write("event:log\ndata:$chunk\n\n");
    }
  );

  $stream->on(
    close => sub {
      my $stream = shift;
      say "Close" if $DEBUG;    # DEBUG
      $self->finish("event:log\ndata:Log Closed<br><br>\n\n") if ( $self && $self->tx && !$self->tx->is_finished );
    }
  );

  $stream->on(
    error => sub {
      my ( $stream, $err ) = @_;
      say "MY Error: $err" if $DEBUG;    # DEBUG
      $self->finish("event:log\ndata:Error...Closing<br><br>\n\n") if ( $self && $self->tx && !$self->tx->is_finished );
    }
  );

  # Start listening to $fh
  Mojo::IOLoop->singleton->stream($stream);
  # Unsubscribe from "message" event again once we are done
  $self->on(
    finish => sub {
      my $self = shift;
      # say "Finishing";         # DEBUG
      # Kill child
      kill( "TERM", $pid ) if $pid;
      undef $pid;
    }
  );
};

#-----------------------------------------------------------------------------
# captcha input
#-----------------------------------------------------------------------------
get '/captcha/get' => sub {
    my $self = shift;
    my $path = shift @{ $pcw->{engine}{ocr}{web}{request} };
    $self->render( data => 'no image') && return unless $path;
    $self->cookie('captcha_path' => $path);
    my $content = readfile($path);
    my (undef, undef, $suf) = fileparse($path, 'png', 'jpeg', 'jpg', 'gif', 'bmp');
    $self->render( data => $content, format => $suf );
};

post '/captcha/send' => sub {
    my $self = shift;
    my $path = $self->cookie('captcha_path');
    my $text = $self->param('text');
    if ($path)
    {
        $pcw->{engine}{ocr}{web}{answers}{$path} = $text;
        $self->cookie('captcha_path' => '');
    }
    $self->render(text => 'ok');
};

#-----------------------------------------------------------------------------
# editing config
#-----------------------------------------------------------------------------
get '/config/get' => [ format => ['json'] ] => sub {
    my $self = shift;
    $self->render_json(\%cnf);
};

get '/config/set/(:var)/(:val)' => sub {
    my $self = shift;
    my $var  = $self->param('var');
    my $val  = decode_base64($self->param('val'));
    $cnf{$var} = $val;
    use Data::Dumper; say Dumper %cnf  if $DEBUG;
    $self->render(text => 'ok');
};

#-----------------------------------------------------------------------------
# Read/Write files
#-----------------------------------------------------------------------------
get '/file/read/:name'  => sub {
    my $self = shift;
    my $name = decode_base64($self->param('name'));
    my $filename = $cnf{$name};
    my $content = readfile($filename, 'utf8');
    $self->render(text => $content);
};

post '/file/write/:name'  => sub {
    my $self = shift;
    my $name = decode_base64($self->param('name'));
    my $filename  = $cnf{$name};
    my $content   = $self->param('content');
    open my $fh, '>', $filename;
    print $fh $content;
    close $fh;
    $self->render(text => 'ok');
};

get '/file/exists/:name'  => sub {
    my $self = shift;
    my $name = decode_base64($self->param('name'));
    $self->render(text => (-e $name ? 'yes' : 'no' ) );
};

#-----------------------------------------------------------------------------
# get mode or chan list
#-----------------------------------------------------------------------------
get '/get/:var' => [ format => ['json'] ] => sub {
    my $self = shift;
    my $var  = $self->param('var');
    given ($var)
    {
        when('mode')
        {
            my @modes = grep {$_!~/Base/} map { m|/(\w+)\.pm|; $1 } glob("PCW/Modes/*.pm");
            $self->render_json([ @modes ]);
        }
        when('chan')
        {
            my @chans = map { m|/(\w+)\.pl|; $1 } glob("chans/*.pl");
            $self->render_json([ @chans ]);
        }
        when('proxy_type')
        {
            $self->render_json([ qw/http socks socks4/ ]);
        }
    }
};

#get '/main.css' => 'main';
#get '/login.css' => 'login';
#-----------------------------------------------------------------------------
app->mode('production') unless $DEBUG;
app->start;

__DATA__
@@ status.json.ep
@@ stats.json.ep
@@ get.json.ep
@@ config/get.json.ep
@@ log/read.html.ep

@@ login.html.ep
  <!doctype html>
  <html>
    <head>
      <title>Login</title>
    </head>
    <body>
      <span style='text-align:center'>
      <%= form_for login => begin %>
      <% if (param 'pass') { %>
        <h3><b>Invalid password</b></h3><br>
      <% } %>
      Password 
      <%= password_field 'pass' %>
      <%= submit_button 'OK' %>
      <% end %>
      </span>
    </body>
  </html>

@@ index.html.ep
% our $VERSION = '2.3.2';
%= javascript 'http://code.jquery.com/jquery-1.7.2.min.js'
%= javascript begin
var cnf = {
    autoscroll: true,
};

// config
function setConfig(variable, value) {
    $.get('/config/set/' + variable + '/' + btoa(value));
}

function updateCaptcha() {
    $("#captcha_img").removeAttr("src").attr("src", "/captcha/get?" + Math.random() );
}

function sendCaptcha(value) {
    $.post('/captcha/send', { text: value }, function() {
        $("#captcha_input").val('');
        updateCaptcha();
    });
}

function updateConfig() {
    $.getJSON('/config/get.json', function(data) {
        for (k in data) { // fill the configs fields
            $('#' + k).empty();
            if (k == 'lognocolor' || k == 'verbose') {
                if (data[k] == 1) {
                    $('#' + k).append('on');
                } else {
                    $('#' + k).append('off');
                }
            } else {
                $('#' + k).append(data[k]);
            }
        }

        $('#config a.input').each(function(i) {
            var elem = this.id;

            $('#' + elem + '_input').empty();
            $('#' + elem + '_input').append('<input type="text" value="'+ $('#' + elem).html() +'" class="'+ elem +'"><br>');

            $('#'+ elem + '_input input').blur(function() {
                var newVal = $(this).val();
                switch (elem)
                {
                    case 'proxy_file':
                    case 'mode_config':
                    case 'common_config':
                    case 'useragents':
                        $.get('/file/exists/' + btoa(newVal), function(data) {
                            if (data == 'yes') {
                                $('#'+ elem).html(newVal);
                                setConfig(elem, newVal);
                            } else {
                                printLog('File ' + newVal + ' does not exist!', 'red');
                            }
                        });
                        break;
                    default:
                        $('#'+ elem).html(newVal);
                        setConfig(elem, newVal);
                }
                // $('#' + elem + '_input').empty();
                // $('#' + elem + '_input').append('<input type="text" value="'+ newVal +'" class="'+ elem +'"><br>');
            });
            $('#'+ elem).click(function() {
                $('#' + elem +'_input').toggle();
            });
        });

        $('#config a.toggle').each(function(i) {
            var elem = this.id;
            $('#'+ elem).click(function() {
                var val = $(this).html();
                if (val == 'on') {
                    $('#'+ elem).html('off');
                    setConfig(elem, 0);
                } else {
                    $('#'+ elem).html('on');
                    setConfig(elem, 1);
                }
            });
        });

        $('#config a.menuJSON').each(function(i) {
            var elem = this.id;
            $.getJSON('/get/'+ elem +'.json', function(data) {
                var items = [];
                $.each(data, function(i, item){
                    if (item) {
                        items.push(item);  
                    }
                });

                $.each(items, function(i, val) {
                    $('#'+ elem +'_menu').empty();
                });

                $.each(items, function(i, val) {
                    $('#'+ elem +'_menu').append('&nbsp; <a href="#" class="'+ elem +'">' + val  + '</a><br>');
                });

                $('#'+ elem + '_menu a').click(function() {
                    var newVal = $(this).html();
                    $('#'+ elem).html(newVal);
                    setConfig(elem, newVal);
                });
                $('#'+ elem).click(function() {
                    $('#' + elem +'_menu').toggle();
                });
            });
        });
    });
    $.get('/countproxies', function(data) {
        $('#proxy_count').html(data);
    });
}

// stats
function updateStats() {
    var printStats = function(data) {
        $.each(data, function(key, val) {
            if (typeof(val) == 'object') {
                key = key.charAt(0).toUpperCase() + key.slice(1);
                key = key.replace('_', ' ');
                $('#stats').append('<b>' + key + '</b> :<br/>');
                printStats(val);
            } else {
                key = key.charAt(0).toUpperCase() + key.slice(1);
                key = key.replace('_', ' ');
                $('#stats').append(key + ' : ' + val + '<br/>');
            }
        });
    };
    $.getJSON('/stats.json', function(data) {
        if (data) {
            $('#stats').empty();
            printStats(data);
        }
    });
}

// logging
function printLog(str, color) {
    $("#log").append('<tt><font face="fixedsys, lucida console, terminal, vga, monospace" style="line-height: 1; letter-spacing: 0; font-size: 9pt"><span style="color: ' + color + '; background: black;">' + str + '<br></span></font></tt>');
    if (cnf['autoscroll']) {
        $("#log").scrollTop( $("#log").scrollTop() + 1000 );
    }
}

//--------------------------------------------------------------------------

$(document).ready(function(){
    $(document).ajaxError(function (e, xhr, settings, exception) {
        if (xhr.responseText) { 
            $('html').html(xhr.responseText);
        } else {
            printLog('Ajax Error at [' + settings.type + '] '  + settings.url + ': '  + xhr.statusText, 'red');
        }
    });

    $("#sendPosts").click(function() {
        $.get('/wipe/send_posts');
    });
    // logging
    var logging = new EventSource('/log/read');
    logging.addEventListener('log', function(event) {
        $("#log").append(event.data);
        if (cnf['autoscroll']) {
            $("#log").scrollTop( $("#log").scrollTop() + 1000 );
        }
    }, false);

    // status
    setInterval(function() {
        $.getJSON('/status.json', function(data) {
            $('#status').html(data);
        });
    }, 10000);
    $("#status").click(function() {
        if ($(this).html() == 'start') {
            $.get('/start');
        } else {
            $.get('/stop');
        }
        $.getJSON('/status.json', function(data) {
            $('#status').html(data);
        });
    });
    // stats
    setInterval(updateStats, 5000);

    // clear log
    $("#clearLog").click(function() {
        $("#log").empty();
    });

    $("#autoscroll").click(function() {
        if (cnf['autoscroll']) {
            cnf['autoscroll'] = false;
            $("#autoscroll").html('autoscroll(off)');
        } else {
            cnf['autoscroll'] = true;
            $("#autoscroll").html('autoscroll(on)');
        }
    });

    // reload config
    $(".reload").each(function(i) {
        var elem = $(this);
        var name = elem.attr('name')
        elem.click(function() {
            var oldHtml = elem.html();
            elem.html('…');
            $.get('/reload/' + name);
            if (name == 'all') {
                $.get('/countproxies', function(data) {
                    $('#proxy_count').html(data);
                });
            }
            if ($('#mode').html() == 'Wipe') {
                $('#sendPosts').css('display', 'inline');
            } else {
                $('#sendPosts').css('display', 'none');
            }
            setTimeout( function() { elem.html(oldHtml) }, 1000 );
        });
    });

    // file editor
    $(".edit").click(function(modeName) {
        $('#logContainer').css('display', 'none');
        $('#editorContainer').css('display', 'block');
        var fileName = $(this).attr('name');
        $('#saveFile').attr('name', fileName);
        $.get('/file/read/' + btoa(fileName), function(data) {
            $('#editor').val( data );
        });
    });
    $("#saveFile").click(function() {
        var data = $('textarea#editor').val();
        $.post('/file/write/' + btoa($(this).attr('name')), { content: data });
        $('#logContainer').css('display', 'block');
        $('#editorContainer').css('display', 'none');
    });
    $("#hideFile").click(function() {
        $('#logContainer').css('display', 'block');
        $('#editorContainer').css('display', 'none');
    });

    // captcha
    $("#captcha_input").keypress(function(e) {
        if (e.which == 13) {
            var value = $(this).val();
            sendCaptcha(value);
        } else {
            var len = $(this).val().length;
            $("#charNum").html(len);
        }
    });
    $("#captcha_input").keyup(function(e) {
        var len = $(this).val().length;
        $("#charNum").html(len);
    });
    $("#captcha_input").keydown(function(e) {
        var len = $(this).val().length;
        $("#charNum").html(len);
    });

    $("#captcha_img").click(function() {
        sendCaptcha('');
    });
    $("#refreshCaptcha").click(function() {
        sendCaptcha('');
    });
    updateStats();
    updateConfig();
});
% end

  <!DOCTYPE html>
  <html>
    <head>
      <title>Perl Chan Wiper</title>
  %= stylesheet begin
  html body {
      height: 90%;
      background: grey;
  }

  a {
      color: blue;
      text-decoration: none;
  }

  a:hover {
      text-decoration: underline;
  }

  #status {
      color: #5cff00;
      font-size: 17pt;
  }

  #stats {
      min-height: 100px;
  }

  #log {
      background-color: black;
      overflow: auto;
      width: 65%;
      height: 90%;
      overflow-x: hidden;
      border: 1px dotted white; 
      padding: 5px;
  }

  #editorContainer {
      display: none;
  }

  #captcha_img {
      padding: 5px;
  }

  #summary {
      width: 30%;
      height: 80%;
      float: left;
      padding: 5px;
      background: no-repeat bottom left grey;
  }
  % end
    </head>
    <body>
      <span style='color:red; font-size: 17pt;'>Perl Chan Wiper v<%= $VERSION %></span> — <a href="#" id="status">start</a>
      <% if (session 'pass') { %>
        — 
        <%= link_to logout => begin %>
        logout
        <% end %>
      <% } %> <span style='display:inline' id='sendPosts'> | <a href="#">send posts</a></span>
      <hr>
      <div id="summary">
        <h4>Configure</h4>
        <div id="config">
          Mode: <a id='mode' class='menuJSON' href='#'></a><br>
          <span id="mode_menu" style="display: none"></span>

          Chan: <a id='chan' class='menuJSON' href='#'></a><br>
          <span id="chan_menu" style="display: none"></span>
          <!-- &nbsp;&nbsp;<a class="reload" name="chan" href="#">reload chan</a><br> -->

          [<a class='edit' href='#' name='common_config'>edit</a>] Common config: <a id='common_config' class='input' href='#'></a><br>
          <span id="common_config_input" style="display: none"></span>
          [<a class='edit' href='#' name='mode_config'>edit</a>] Mode config: <a id='mode_config' class='input' href='#'></a><br>
          <span id="mode_config_input" style="display: none"></span>

          [<a class='edit' href='#' name='proxy_file'>edit</a>] Proxy file: <a id='proxy_file' class='input' href='#'></a> (<span id='proxy_count'>0</span>)<br>
          <span id="proxy_file_input" style="display: none"></span> 
          Proxy type: <a id='proxy_type' class='menuJSON' href='#'></a><br>
          <span id="proxy_type_menu" style="display: none"></span>

          Loglevel: <a id='loglevel' class='input' href='#'></a><br>
          <span id="loglevel_input" style="display: none"></span>
          Lognocolor: <a id='lognocolor' class='toggle' href='#'></a><br>
          Verbose: <a id='verbose' class='toggle' href='#'></a><br>

          UserAgents: <a id='useragents' class='input' href='#'></a><br>
          <span id="useragents_input" style="display: none"></span>

          Reload:<br>
          [ <a class="reload" name="all" href="#">all</a> | <a class="reload" name="configs" href="#">configs</a> & <a class="reload" name="watchers" href="#">watchers</a> | <a class="reload" name="log" href="#">log</a> | <a class="reload" name="agents" href="#">UserAgents</a> ]
        </div>
        <hr>
        <h4>Stats</h4>
        <div id="stats"></div>
        <h4>Captcha</h4>
        <input type="text" value="" id="captcha_input"> <a href="#" id="refreshCaptcha">refresh</a> <span id="charNum">0</span> <br>
        (press enter to send) <br>
        <img id="captcha_img" src="" alt="">
      </div>
      <div id="logContainer">
        <h4>Log</h4>
        [ <a href="#" id="clearLog">clear</a> - <a href="#" id="autoscroll">autoscroll(on)</a> ]
        <div id="log"> </div>
      </div>
      <div id="editorContainer">
        <h4>Editor</h4>
        [ <a href="#" id="saveFile">save</a> - <a href="#" id='hideFile'>close</a> ]
        <textarea name='' id='editor' rows='50' cols='120'>
        </textarea>
      </div>
    </body>
  </html>
