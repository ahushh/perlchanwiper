#!/usr/bin/perl
$|=1;

our $VERSION = '0.2.2-73';

use v5.12;
use utf8;
use autodie;
use Carp;

use File::Spec;
use FindBin qw/$Bin/;
use lib File::Spec->catfile($Bin, 'lib'), $Bin;
binmode(STDOUT, ":utf8");

#-----------------------------------------------------------------------------
use Coro;
use AnyEvent;
use Coro::Timer;
use Getopt::Long qw/:config bundling/;
use POSIX        qw/strftime/;
use File::Basename;
#-----------------------------------------------------------------------------
use PCW::Core::Utils qw/get_proxylist readfile/;
use PCW::Core::Log;

#-----------------------------------------------------------------------------
# Global variables
#-----------------------------------------------------------------------------
our %mode_config;
our $chan_config;

my @proxies; #-- list of proxies
my @agents;  #-- list of user-agents
my $engine;  #-- PCW::Engine::* object
my $logging; #-- PCW::Core::Log object

#-----------------------------------------------------------------------------
# Config
#-----------------------------------------------------------------------------
my %cnf = (
    chan       => '',
    mode       => '',
    verbose    => 0,
    #useragents => File::Spec->catfile($Bin, 'UserAgents'),
    useragents => File::Spec->catfile('.', 'UserAgents'),
    #proxy_file => File::Spec->catfile($Bin, 'proxy', 'no'),
    proxy_file => File::Spec->catfile('.', 'proxy', 'no'),
    proxy_type => 'http',

    #common_config => File::Spec->catfile($Bin, 'config.pl'), #-- common config path
    common_config => File::Spec->catfile('.', 'config.pl'), #-- common config path
    mode_config   => '',                                     #-- mode config path

    loglevel   => 1,
    logfile    => '',
    lognocolor => undef,

    umeasure   => 'minute',
);

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
sub parse_args()
{
    my $help   = 0;
    my $desu   = 0;
    my $result = GetOptions(
                            'chan=s'     => \$cnf{chan},
                            'mode=s'     => \$cnf{mode},
                            'proxy=s'    => \$cnf{proxy_file},
                            'ua=s'       => \$cnf{useragents},
                            'cconfig=s'  => \$cnf{common_config},
                            'mconfig=s'  => \$cnf{mode_config},
                            'loglevel=i' => \$cnf{loglevel},
                            'logfile=s'  => \$cnf{logfile},
                            'lognocolor' => \$cnf{lognocolor},
                            'verbose'    => \$cnf{verbose},
                            'help|?'     => \$help,
                            'desu'       => \$desu,
                            'umeasure=s' => \$cnf{umeasure},
                           );
    if ($desu)
    {
        desu();
        exit 1;
    }
    if ($help || !($cnf{mode} && $cnf{chan}))
    {
        usage();
        exit 1;
    }
    #$cnf{mode_config} = File::Spec->catfile($Bin, 'configs', "$cnf{mode}.pl")
    $cnf{mode_config} = File::Spec->catfile('.', 'configs', "$cnf{mode}.pl")
        unless $cnf{mode_config};
}

#-----------------------------------------------------------------------------
# Config checking
#-----------------------------------------------------------------------------
sub check_chan_config()
{
    for ( qw/post delete page zero_page thread/ )
    {
        Carp::croak("Chan config error: Option urls => '$_' must be specified at chans/$cnf{chan}.pl")
                unless ($chan_config->{urls}{$_});
    } #--------------------------------------------------------------------------
    for ( qw/engine captcha_extension fields/ )
    {
        Carp::croak("Chan congig error: Option '$_' must be specified at chans/$cnf{chan}.pl")
                unless ($chan_config->{$_});
    } #--------------------------------------------------------------------------
    Carp::croak("Chan config error: HOST must be specified at chans/$cnf{chan}.pl")
            unless ($chan_config->{headers}{default}{Host});
}

sub check_user_error()
{
    Carp::croak("Chan config '$cnf{chan}' does not exist")
        #unless($cnf{chan} || -e File::Spec->catfile($Bin, 'chans', "$cnf{chan}.pl"));
        unless($cnf{chan} || -e File::Spec->catfile('.', 'chans', "$cnf{chan}.pl"));

    Carp::croak("Common config '$cnf{common_config}' does not exist")
        unless($cnf{common_config} || -e $cnf{common_config});

    my $modes_list = join('|', map { m|/(\w+)\.pm|; $1 } glob("PCW/Modes/*.pm") );
    Carp::croak("Mode '$cnf{mode}' does not exist")
        unless($cnf{mode} =~ /$modes_list/i);

    Carp::croak("Mode '$cnf{mode}' config does not exist")
        unless(-e $cnf{mode_config});

    Carp::croak("Proxylist '$cnf{proxy_file}' does not exist")
        unless($cnf{proxy_file} && (-e $cnf{proxy_file} || $cnf{proxy_file} =~ /http/) );

    Carp::croak("Proxy type '$cnf{proxy_type}' is not specified")
        unless($cnf{proxy_type});

    Carp::croak("Useragents list '$cnf{useragents}' does not exist")
        unless($cnf{useragents} && -e $cnf{useragents});
}

#-----------------------------------------------------------------------------
# Info
#-----------------------------------------------------------------------------
sub show_info()
{
    say "Perl Chan Wiper v$VERSION";
    say "~" x 30;
    say sprintf "Chan: %s %s", $cnf{chan}, ($chan_config->{description} ? "($chan_config->{description})" : "");
    say "Engine: "          . $chan_config->{engine};
    say "Work mode: "       . $cnf{mode};
    say "Mode config: "     . $cnf{mode_config};
    say "Common config: "   . $cnf{common_config};
    say "Proxies loaded: "  . scalar @proxies;
    say "Browsers loaded: " . scalar @agents;
    say "~" x 30;
    say "Log level: ".       $cnf{loglevel};
    say "Log file: ".        ($cnf{logfile}   || "STDOUT");
    say "Colored logging: ". ($cnf{lognocolor} ? 'no'  : 'yes');
    say "Verbose output: " . ($cnf{verbose}    ? 'yes' : 'no');
    say "~" x 30;
}

#-----------------------------------------------------------------------------
# Load
#-----------------------------------------------------------------------------
sub load_configs()
{
    our ($img, $msg, $vid, $captcha_decode);
    require $cnf{common_config}; #-- load $img, $msg, $vid, $captcha_decode
    require $cnf{mode_config}  ; #-- load %mode_config

    $mode_config{img_data} = $img;
    $mode_config{msg_data} = $msg;
    $mode_config{vid_data} = $vid;
    $mode_config{captcha_decode} = $captcha_decode;
}

sub load_proxies()
{
    @proxies = get_proxylist($cnf{proxy_file}, $cnf{proxy_type});
}

sub load_agents()
{
    @agents = readfile($cnf{useragents});
}

sub load_chan()
{
    #my $package = File::Spec->catfile($Bin, 'chans', "$cnf{chan}.pl");
    my $package = File::Spec->catfile('.', 'chans', "$cnf{chan}.pl");
    require "$package"; #-- load $chan_config
}

sub load_logging()
{
    $logging = PCW::Core::Log->new( file => $cnf{logfile}, level => $cnf{loglevel}, colored => !$cnf{lognocolor} );
}

sub load_engine()
{
    my $package = "PCW::Engine::". $chan_config->{engine};
    eval("use $package");
    Carp::croak($@) if $@;
    $engine = $package->new(%$chan_config, agents => \@agents, log => $logging, verbose => $cnf{verbose});
}

sub load_mode()
{
    my $package = "PCW::Modes::$cnf{mode}";
    eval("use $package");
    Carp::croak($@) if $@;
    return $package->new(engine   => $engine,
                         proxies  => \@proxies,
                         conf     => \%mode_config,
                         log      => $logging,
                         verbose  => $cnf{verbose});

}
#-----------------------------------------------------------------------------
# Usage
#-----------------------------------------------------------------------------
sub desu()
{
    print $_ while (<DATA>);
}

sub usage()
{
    my @modes;
    for my $path (glob "PCW/Modes/*.pm")
    {
        next if $path =~ /Base/;
        my ($mode, undef, undef) = fileparse($path, '.pm');
        push @modes, $mode;
    }
    my @chans;
    for my $path (glob "chans/*.pl")
    {
        next if $path =~ /example/;
        my ($chan, undef, undef) = fileparse($path, '.pl');
        push @chans, $chan;
    }
    my @engines;
    for my $path (glob "PCW/Engine/*.pm")
    {
        next if $path =~ /Abstract|Simple/;
        my ($engine, undef, undef) = fileparse($path, '.pm');
        push @engines, $engine;
    }

    local $" = ', ';
    print <<DESU
PerlChanWiper - a multifunction CLI tool for some imageboards

Usage: $0 --chan [chan] --mode [mode] ...

PCW Options:
    --chan          Chan name (@chans)
    --mode          Work mode (@modes)
    --proxy         Path to file or url which contains proxies (default is '$cnf{proxy_file}')
    --proxytype     Default proxy protocol (default is '$cnf{proxy_type}')
    --ua            User agents list file (default is '$cnf{useragents}')
    --cconfig       Common config file (default is '$cnf{common_config}')
    --mconfig       Mode config file (default is 'configs/\$mode_name.pl')

    --logfile       File for logging (STDOUT by default)
    --lognocolor    Disable colored log output
    --loglevel      1-4, 1 by default
    --verbose       Verbose output

UI options:
    --help          Show this message and exit
    --desu          Show desu and exit

    --umeasure      Unit of measurement of posting speed (minute/hour/second)

Supported chan engines: @engines
Version $VERSION
DESU
}

#-----------------------------------------------------------------------------
# LOAD
#-----------------------------------------------------------------------------
sub load_all()
{
    check_user_error();
    load_configs();      #-- load %mode_config
    load_proxies();
    load_agents();
    load_chan();         #-- load $chan_config
    check_chan_config();
    load_logging();
    load_engine();
    return load_mode();
}

parse_args();
my $pcw = load_all();
show_info();

#-----------------------------------------------------------------------------
# RUN
#-----------------------------------------------------------------------------
my $start_time = time;
my $ws = AnyEvent->signal(signal => "INT", cb => sub { $pcw->stop; });
$pcw->init;
$pcw->start;
while ($pcw->{is_running})
{
    Coro::Timer::sleep 1
}
#-----------------------------------------------------------------------------
# ON EXIT
#-----------------------------------------------------------------------------
sub show_stats($)
{
    my %stats = %{ shift() };
    say "~" x 30;
    for my $k (keys %stats)
    {
        say ucfirst($k) .": $stats{$k}";
    }
}

sub measure_speed($$$)
{
    my ($posted, $start_time, $u) = @_;
    my $d;
    $d = 1    if $u eq 'second';
    $d = 60   if $u eq 'minute';
    $d = 3600 if $u eq 'hour';
    return sprintf "%.3f", ($posted / ((time - $start_time)/$d));
}

given ($cnf{mode})
{
    when ('ProxyChecker')
    {
        show_stats $pcw->{stats};
        my @p = @{ $pcw->{checked} };
        say $mode_config{save} ? sprintf("There are %d good proxies.", scalar @p) : "Good proxies: @p";
    }
    when ('AutoBump')
    {
        show_stats $pcw->{stats}{bump};
        show_stats $pcw->{stats}{delete};
    }
    when ('Wipe')
    {
        show_stats $pcw->{stats};
        say sprintf("Speed: %s posts per $cnf{umeasure}", measure_speed($pcw->{stats}{posted}, $start_time, $cnf{umeasure}));
    }
    default
    {
        show_stats $pcw->{stats};
    }
}

__DATA__
KMMW;  lMMMMK   XMl       ;Mc0M0 xMM,M:OMMMMK xMMxcMMMMMMMMMMMkWMMMMMMMMMMk     .WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
0MWx.  dMMMMO.  xO'        xW,WMd dMN:M''WMMMM..WMW.,XMMMMMMMMMWONMMMMMMMMMMk     .XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
Mx.  ;XMMMWc   '.          WoxMM' dMOdN  lMMMMd dMMO  oWMMNMMMMMM0XMMMMMMMMMMX.     OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
.  .OMMMMO.               cX:MMN. kMcNx   kMMMW. NMM:  .0MNoXMMMMMKXMMMM0KMMMMW,     dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
  ;XMMMN:             :   XcXMM0  KNlM,    KMMMk :MMN.,. cWN'kMMMMMKKMMMMxcWMMMW,     lMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
;cNMMMx.            .k   ckOMMNd .MdXW.    .NMMM; KMMk Ol .0K oMMMMMKXMMMMk.0MMMW,     lMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
XMMM0.  ..         lX.  .0xMMWW. :NxMNx     'WMMN.'MMMl X0. lo ,WMMMM0NMMMMk oMKWW.     lMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMX;  :x'        .KN.   xkMMWW0  OOWWWW.     ,WMMK xMMMc.NWl .  .XMMMMOWMMMMx ;X,NX.     xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
X: 'xNo        .xWW,   :KMMWWM, .WNMNMWd      ;WMM0.NMMMl;MMK.   'KMMMWOMMMMMl ;c.Nk      0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
'oXMk.        oWMW;   .NMMMNMk  kMMWWWMM'      ,WMX0:MMMMkdNMWd  d;0MMMXKMMMMM, . 'W,     .NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMk.       .oNWMM:   .XMMMWWW. ,MMMNWMMMX       .NdkKxMMMMNd,XMWo.Nc0MMMOWMMMMN.   ox      ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
k.       .dWMMMM:    0MMMNWMo  XMMNWMMMMMO       .O,oNNMMMMW  OMMWWMoKMMWOMMMMMx    ,'      OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
       'kWMMMMW;    OMMWNMMK  xMMWWMMMMMMMd        :.:WMMMMMc  oMMMMMxXMMOWMMMMM'    ;      .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
    .cKMMMMMMN'    OMMNNMMW. :MMNNMMMMMMMMMo .l       .XMMMMK   :MMMMMkWMNOMMMMM0    ;       xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
  ,kWMMMMMMMX.    OMMNWWXMc 'WMWXMMMMMMMMMMMo .0'       kMMMM.   ;WMMMMXMMOMMMMMM, , ,       'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
oNMMMMMMMMMO     OMWXMMMNc  oxOxKNWMMMMMMMMMMd ,Wx       :NMMl    :MMMMMKMOKMMMMMk d;,.       XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMo    .KMNWMMMM0 .XMXkOkdoolcc:;;coxOd ,WNc      .xM0     cMMMM;WN.WMMMMW OKc.       dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMN'    'NWNMMMMMK .XMWXMMMMMMMMMMMNKOxl:'..lxk;      .O      oMMM.kM.dMMMMM:WM:        :MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMO.    :NNWMMMMMK..XMWXMMMMMMMMMMMMMMMMMMMMo ldl;.             OMM':M,,MMMMMXMM:        ,MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMN:     dNWMMMMMM0 'NMWNMMMMMMMMMMMMMMMMMMMMMMK,lWMMO.            XM'.M;.MMMMMMMM,        ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMk.    .0WMMMMMMMO cWMWNMMMMMMMMMMMMMMMMMMMMMMMMMk,OMMMk.          'M. N,.MMMMMMMM.        cMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMK'     lNMMMMMMMMx xMMNWMMMMMMWNNN0kOOO00KXWMMMMMMMWdc0MMWo          o  O..MMMMMMM0         kMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
X:    'xWMMMMMMMMWc.KMWNWMMMMMMNXXKXNMMMMMMMMWMMMMMMMMMWkokWMX;           c ,MMMMMMM,         WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
   .oXMMMMMMMMMMX.:WMNNMMMMMMMMMX0kdlc;;,,,,,;:codOKWMMMMMXdd0MO.           lMMMMMMk         .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
.oKMMMMMMMMMMMMk.OMWNWMMMMMMMXO,  ..                ..':okKNMKxkO,          OMMMMMX.          NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMMN::NMNNMMMMMMMMM0;lOWk .....           ,WXko;.  .';:lx.        WMMMMW'           dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMk,0MNNMMMMMMMMMMMWMMMWdNMMMMMO           oMMMMM,   :OMMW       :MMMMW,            'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMX;oWNNMMMMMMMMMMMMMMMMMKOMMW0o'       .    'MMMMd 'kWMMMMM.      0MMMM;              KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMWl:XNNWMMMMMMMMMMMMMMMMMMW... ..      .lMW.  lMMWl:KMMMMMMMM,     ,MMMW;               :MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMx;0NNMMMMMMMMMMMMMMMMMMMMMMc   ON;   .cNO.0c .NMWONMMMMMMMMMW;     0MMN'                 XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMO;dNWMMMMMMMMMMMMMMMMMMMMMMMMW'.K0MMMWMMMNxKN. KMMWMMMMMMMMMMMW,    :MMK.       .          :MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMO'cXWMMMMMMMMMMMMMMMMMMMMMMMMMMMW: :kXMMMMMMXo..KMMMMMMMMMMMMMMMM.   .NMo        ; .x         XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WkldNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWdoolool;,. .l0KWMMMMMMMMMMMMMW:    OX'       .: .kc         :MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMMMMMMMMMMMMMX'    do        c; xdK           KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWo     ,.       .x.;NKx:           'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0.             .do'0MWoO             oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;              o0:kMMMoN.              XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:             .dKkkMMMMdNl               'WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMO0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0;             ;OWXXMMMMMxKW                 lMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd.            ,xWMMMMMMMMMM0kO.                 OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx,            :0WMMMMMMMMMMMMMKxM'                 .NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMMMMMMMMMMNKOd0MMMMMMMMMMMMMMMMMMMMMKo'              ,MMMMMMM0oNMMMMMMOOM.                  'WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMW:kkxxkkkkOOOOOOO000Xk;NMMMMMMMMMMMMMMMMMMMWOddddxxOK0       ;xMMMMMMWoO0MMMMMMdNN                    cMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMXdKkWMMMMMMMMKOxWW0loWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO.      .dNMMMMMMO0xXMMMMMMoMl                     xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMoxKMMMMMMMMWMW0llXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:        xoMMMMMKMdNoMMMMMMk00                       KMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMM0d0NWMMMMWX0dd0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMO;          0oMMMMMdkOo0kxOMMXxK                        .NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMX0OOOOOO0KWMMMMMMMMMMMMMMMMMMMMMMMMMMMMXo.            koWO0000XMMWO0NMNdMo                         'WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd'               coW0000KWMMxxkd0NdWo                          cMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXo'                  .kKMMNOdOlxoNMMMKcN:                           dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOc.                      NdMMKKMdKdX0MMMxXM.                            0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0o'                          NdMMMMMo0OMMMMMoMK                             .NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0o,                             'oWMMMMMxoWMMMMKxM:                              'WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
KKNMMMMMMMMMMMMMMMMMMMMMMWXX0:clx0Kx'                         ,KMMMMMMMMMMMMMoWX                                lMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMNKKKKWMMMMMMMMMMMMMNXXXXMMkNMMMMMMM0;                       cWMMMMMMMMMMMM0xW'                                 OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMXKKKKNMMWN000KNMMMMMMxMMMMMMMMMMXc                     x0MMMMMMMMMMMX;0:                                  .NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMX000KWMMMMMMMMMWxMKMMMMMMMMMMWo.                  0oMMMMMMMMMMMKdk                                    lMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMXkXoMMMMMMMMMMMMMk'                ok0MMMMMMMMMMWoO                                     XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMM0x'NMMMMMMMMMMMMMMMK:              .NoWMMMMMMMMMXxk                                     :MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMM0 xMMMMMMMMMMMMMMMMMMWd.            ,NoMM0XMMMMMxKo                                      XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMW.,MMMMMMMMMMMMMMMMMMMMMMO.           oOkKdoMMMMMoM,                                      xMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
